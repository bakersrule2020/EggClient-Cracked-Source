using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC;
using VRC.UserCamera;
using VRC.SDKBase;
using System.Collections;
using MelonLoader;
using System.Reflection;
using Newtonsoft;

namespace EggClient
{
    public static class RPCNetworking
    {
        public static bool CameraCaptureToggle;
        private static IEnumerator PhotoCapture(Player player, float time)
        {
            while (true)
            {
                WaitForSeconds delay = new WaitForSeconds(time);
                if (player != null && CameraCaptureToggle)
                {
                    VRC.SDKBase.Networking.RPC(RPC.Destination.All, UserCameraController.field_Internal_Static_UserCameraController_0.field_Internal_UserCameraIndicator_0.gameObject, "PhotoCapture", new Il2CppSystem.Object[0]);
                    UserCameraController.field_Internal_Static_UserCameraController_0.field_Internal_UserCameraIndicator_0.gameObject.transform.position = player.prop_VRCPlayer_0.transform.position;
                    yield return delay;
                    delay.m_Seconds = time;
                }
                else yield break;
            }
        }
        public static void RPCPhotoCapture(Player player, float time) => MelonCoroutines.Start(PhotoCapture(player, time));
        
    }

    public static class PickupNetworking
    {
        public static bool AttachPickups;
        private static IEnumerator SpamObjects(Player player)
        {
            while (true)
            {
                yield return new WaitForSeconds(0.5f);
                if (AttachPickups && player.prop_VRCPlayer_0 != null)
                {
                    foreach (VRC_Pickup PickUps in Resources.FindObjectsOfTypeAll<VRC_Pickup>())
                    {
                        VRC.SDKBase.Networking.SetOwner(VRC.SDKBase.Networking.LocalPlayer, PickUps.gameObject);
                        PickUps.transform.position = player.transform.position;
                    }
                }
                else
                {
                    AttachPickups = false;
                    yield break;
                }
            }
        }
        public static void AttachObjects(Player player) => MelonCoroutines.Start(SpamObjects(player));
    }
}